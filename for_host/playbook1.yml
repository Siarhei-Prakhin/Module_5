---
- name: Install SW
  hosts: Virtual
  become: yes

  vars:
    jenkins_user: admin
    jenkins_pass: admin
    jenkins_homedir: /home/jenkins

  tasks:
  - name: Test
    debug: var=ansible_os_family

  - name: Update apt-get repo and cache
    apt:
      upgrade=yes
      update_cache=yes
      force_apt_get=yes

  - name: Install basic list of packages
    apt:
      name: ['wget','curl','openjdk-8-jdk','python3-jenkins','python3-lxml','apt-transport-https','ca-certificates','software-properties-common','ansible','python3-docker']
      state: present
      update_cache: yes


  - name: Get Docker key
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Add Docker packages to Repository
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename|lower }} stable

  - name: Install Docker-CE
    apt: name="docker-ce" state=latest update_cache=yes

  - name: Copying file that enables insecure docker registry
    copy:
      src: ./daemon.json
      dest: /etc/docker/daemon.json
      mode: 0777

  - name: Docker restart
    service:
      name: docker
      state: restarted


  - name: Wait for 10 sec till the Docker is ready
    pause:
      seconds: 10


  - name: Start a Registry container
    community.docker.docker_container:
      name: registry
      image: registry:2
      state: started
      restart_policy: on-failure
      ports:
       - "5000:5000"



  - name: pull an image
    community.docker.docker_image:
      name: nginx:1.20
      source: pull

  - name: pull an image
    community.docker.docker_image:
      name: nginx:1.21
      source: pull

  - name: Tag and push to local registry
    docker_image:
       name: nginx:1.20
       repository: localhost:5000/nginx 
       tag: 1.20
       push: yes
       source: local

  - name: Tag and push to local registry
    docker_image:
       name: nginx:1.21
       repository: localhost:5000/nginx
       tag: 1.21
       push: yes
       source: local



  - name: Add Jenkins repository key
    apt_key:  url='https://pkg.jenkins.io/debian/jenkins.io.key'

  - name: Add Jenkins repository
    apt_repository:
      repo: 'deb https://pkg.jenkins.io/debian-stable binary/'
      state: present
      update_cache: yes

  - name: Install Jenkins
    apt:
      name: jenkins
      state: present
      update_cache: yes

  - name: Make Jenkins SU
    shell: usermod -a -G sudo jenkins

  - name: Set JENKINS_HOME directory
    lineinfile:
      create: true
      dest: "/etc/default/jenkins"
      line: "JENKINS_HOME={{ jenkins_homedir }}"
      regexp: '^JENKINS_HOME='
      state: present

  - name: Ensure correct ownership of JENKINS_HOME directory
    file:
      path: "{{ jenkins_homedir }}"
      owner: "jenkins"
      group: "jenkins"
      mode: 0755
      state: directory

  - name: Turn off jenkins setup wizard
    lineinfile:
      dest: /etc/default/jenkins
      regexp: '^JAVA_ARGS='
      line: 'JAVA_ARGS="-Djava.awt.headless=true -Djenkins.install.runSetupWizard=false"'

  - name: Jenkins restart
    service:
      name: jenkins
      state: restarted


  - name: Wait for 30 sec till the Jenkins is ready
    pause:
      seconds: 30

  - name: Jenkins unlock and add admin user
    jenkins_script:
        script: |
          import jenkins.model.*
          import hudson.security.*
          def instance = Jenkins.getInstance()
          def hudsonRealm = new HudsonPrivateSecurityRealm(false)
          hudsonRealm.createAccount('{{ jenkins_user }}', '{{ jenkins_pass }}')
          instance.setSecurityRealm(hudsonRealm)
          def strategy = new FullControlOnceLoggedInAuthorizationStrategy()
          strategy.setAllowAnonymousRead(false)
          instance.setAuthorizationStrategy(strategy)
          instance.save()


  - name: Install Jenkins plugins
    jenkins_plugin:
      name: "{{ item }}"
      timeout: 150
      url_username: "{{ jenkins_user }}"
      url_password: "{{ jenkins_pass }}"
      url: http://127.0.0.1:8080
    with_items:
      - github
      - greenballs
      - workflow-aggregator
      - ssh-agent
      - deploy
      - extended-choice-parameter
      - docker-workflow
      - ws-cleanup


  - name: Jenkins restart
    service:
      name: jenkins
      state: restarted


  - name: Wait for 30 sec till the jenkins is ready
    pause:
      seconds: 30

  - name: Enabling Jenkins execute setup commands without password
    lineinfile:
      dest: /etc/sudoers
      regexp: '^sudo   ALL'
      insertafter: '^%sudo   ALL'
      line: 'jenkins ALL=(ALL) NOPASSWD: ALL'
      state: present

  - name: Add the user 'jenkins' to the 'docker' group 
    user:
      name: jenkins
      shell: /bin/bash
      groups: docker
      append: yes


  - name: Copying ssh private key of swarm-VGnode-1
    copy:
      src: ./.vagrant/machines/swarm-VGnode-1/virtualbox/private_key
      dest: /home/vagrant/private_key_1
      mode: 0777

  - name: Copying ssh private key of swarm-VGnode-2
    copy:
      src: ./.vagrant/machines/swarm-VGnode-2/virtualbox/private_key
      dest: /home/vagrant/private_key_2
      mode: 0777

  - name: Copying file that enables insecure docker registry on swarm machines
    copy:
      src: ./daemon_sw.json
      dest: /home/vagrant/daemon_sw.json
      mode: 0777
